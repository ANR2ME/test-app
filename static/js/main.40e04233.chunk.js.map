{"version":3,"sources":["Utils.js","redux/actions.js","redux/reducers.js","redux/store.js","services/httpService.js","components/CurrencyListItem.js","components/CurrencyList.js","components/AddMoreCurrency.js","components/App.js","serviceWorker.js","index.js"],"names":["CurrencyNames","actions","ADD_ITEM","REM_ITEM","SET_BASE_AMOUNT","SET_NEED_FETCH","FETCH_EXRATES_PENDING","FETCH_EXRATES_SUCCESS","FETCH_EXRATES_ERROR","addItem","data","type","remItem","id","setBaseAmount","amount","fetchExratesPending","fetchExratesSuccess","fetchExratesError","error","initialState","baseCurrency","baseAmount","needFetch","fetchRetry","fetchError","fetchPending","itemList","map","item","uniqueId","sym","exrate","decimals","reducers","state","action","console","log","concat","filter","obj","NEED_FETCH","newObj","Object","assign","parseFloat","getNeedFetch","getExrates","getExratesPending","getExratesError","middlewares","thunk","store","createStore","applyMiddleware","fetchExrates","symbols","dispatch","fetch","then","res","json","rates","catch","CurrencyListItem","this","props","List","Item","Content","Segment","Grid","columns","Row","stretched","Column","textAlign","width","Label","size","className","Number","toFixed","toLocaleString","minimumFractionDigits","maximumFractionDigits","Button","floated","onClick","icon","name","negative","Component","connect","CurrencyList","join","prevProps","prevState","snapshot","Dimmer","active","inverted","Loader","key","bindActionCreators","AddMoreCurrency","toggleAddMore","setState","showAddMore","handleChange","e","value","handleSubmit","currency","toUpperCase","currencyOptions","keys","text","fluid","labelPosition","positive","content","Form","onSubmit","Group","widths","Field","Dropdown","ref","placeholder","search","selection","options","onChange","primary","App","handleBlur","Container","Input","onBlur","basic","Divider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40e04233.chunk.js","sourcesContent":["import uniqueId from 'lodash/uniqueId';\r\n\r\nconst CurrencyNames = {\r\n\t'USD':'United State Dollar',\r\n\t'CAD':'Canadian Dollar',\r\n\t'IDR':'Indonesian Rupiah',\r\n\t'GBP':'British Pound',\r\n\t'CHF':'Swiss Franc',\r\n\t'SGD':'Singapore Dollar',\r\n\t'INR':'Indian Rupee',\r\n\t'MYR':'Malaysian Ringgit',\r\n\t'JPY':'Japanese Yen',\r\n\t'KRW':'South Korean Won',\r\n\t'EUR':'Euro'\r\n}\r\n\r\nclass localDB {\r\n\t\r\n\taddItem(name,data){\r\n\t\tlocalStorage.setItem(name,JSON.stringify(data));\r\n\t}\r\n\t\r\n\tgetItem(name){\r\n\t\tvar data = localStorage.getItem(name);\r\n\t\treturn (data && JSON.parse(data)) || [];\r\n\t}\r\n\t\r\n\tremoveItem(name){\r\n\t\tlocalStorage.removeItem(name);\r\n\t}\r\n\t\r\n\tclear(){\r\n\t\tlocalStorage.clear();\r\n\t}\r\n}\r\n\r\nexport default localDB;\r\n\r\nexport { CurrencyNames, uniqueId };\r\n","let actions = {\r\n\tADD_ITEM: 'ADD_ITEM',\r\n  REM_ITEM: 'REM_ITEM',\r\n  SET_BASE_AMOUNT: 'SET_BASE_AMOUNT',\r\n  \r\n  SET_NEED_FETCH: 'SET_NEED_FETCH',\r\n  FETCH_EXRATES_PENDING: 'FETCH_EXRATES_PENDING',\r\n  FETCH_EXRATES_SUCCESS: 'FETCH_EXRATES_SUCCESS',\r\n  FETCH_EXRATES_ERROR: 'FETCH_EXRATES_ERROR',\r\n}\r\n\r\nexport const addItem = (data) => ({ type: actions.ADD_ITEM, data });\r\nexport const remItem = (id) => ({ type: actions.REM_ITEM, id });\r\nexport const setBaseAmount = (amount) => ({ type: actions.SET_BASE_AMOUNT, amount });\r\n\r\nexport const setNeedFetch = (needFetch) => ({ type: actions.SET_NEED_FETCH, needFetch });\r\nexport const fetchExratesPending = () => ({ type: actions.FETCH_EXRATES_PENDING });\r\nexport const fetchExratesSuccess = (data) => ({ type: actions.FETCH_EXRATES_SUCCESS, data });\r\nexport const fetchExratesError = (error) => ({ type: actions.FETCH_EXRATES_ERROR, error });\r\n\r\nexport default actions;\r\n","import { uniqueId } from './../Utils';\r\nimport actions from './actions';\r\n\r\nconst initialList = ['IDR','EUR'];\r\nconst initialState = {\r\n\tbaseCurrency: 'USD',\r\n\tbaseAmount: 10.0,\r\n\tneedFetch: false,\r\n\tfetchRetry: 0,\r\n\tfetchError: '',\r\n\tfetchPending: false,\r\n\titemList: initialList.map((item) => {\r\n\t\treturn { id:uniqueId('item_'), sym:item, exrate:0.0, decimals:4 }\r\n\t})\r\n}\r\n\r\nlet reducers = (state = initialState, action) => {\r\n\tconsole.log(\"Action: \",action);\r\n\tswitch (action.type) { \r\n\t\tcase actions.ADD_ITEM:\r\n\t\t\treturn {...state, needFetch:true, itemList: state.itemList.concat({ id:uniqueId('item_'), sym:action.data, exrate:0.0, decimals:4 })};\r\n\t\tcase actions.REM_ITEM:\r\n\t\t\treturn {...state, itemList: state.itemList.filter(obj => obj.id !== action.id)};\r\n\t\tcase actions.SET_BASE_AMOUNT:\r\n\t\t\treturn {...state, baseAmount:action.amount};\r\n\r\n\t\tcase actions.NEED_FETCH:\r\n\t\t\treturn {...state, needFetch:action.needFetch};\r\n\t\tcase actions.FETCH_EXRATES_PENDING:\r\n\t\t\treturn {...state, fetchPending:true, needFetch:false};\r\n\t\tcase actions.FETCH_EXRATES_SUCCESS:\r\n\t\t\treturn {...state, fetchPending:false, needFetch:false, fetchRetry:0,\r\n\t\t\t\titemList: state.itemList.map((obj)=>{\r\n\t\t\t\t\tlet newObj = Object.assign({},obj);\r\n\t\t\t\t\tnewObj.exrate = parseFloat(action.data[obj.sym]);\r\n\t\t\t\t\tnewObj.decimals = (newObj.exrate>=100.0?2:4);\r\n\t\t\t\t\treturn newObj;\r\n\t\t\t\t})};\r\n\t\tcase actions.FETCH_EXRATES_ERROR:\r\n\t\t\treturn {...state, fetchPending:false, fetchRetry:(state.fetchRetry+1), needFetch:(state.fetchRetry<2), fetchError:action.error};\r\n\t\tdefault:      \r\n\t\t\treturn state;  \r\n\t}\r\n}\r\n\r\nexport default reducers;\r\nexport { initialState };\r\nexport const getNeedFetch = state => state.needFetch;\r\nexport const getExrates = state => state.itemList;\r\nexport const getExratesPending = state => state.fetchPending;\r\nexport const getExratesError = state => state.fetchError;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nconst middlewares = [thunk];\r\nconst store = createStore(reducers, applyMiddleware(...middlewares));\r\n\r\nexport default store;","import { fetchExratesPending, fetchExratesSuccess, fetchExratesError, setNeedFetch } from './../redux/actions';\r\n\r\nexport default function fetchExrates(baseCurrency, symbols){\r\n\t\treturn dispatch => {\r\n\t\t\tconsole.log('Fetching!!');\r\n\t\t\tdispatch(fetchExratesPending());\r\n\t\t\tfetch('https://api.exchangeratesapi.io/latest?base='+baseCurrency+'&symbols='+symbols)\r\n\t\t\t.then(res => res.json())\r\n\t\t\t.then(res => {\r\n\t\t\t\tif(res.error) {\r\n\t\t\t\t\tthrow(res.error);\r\n\t\t\t\t}\r\n\t\t\t\tdispatch(fetchExratesSuccess(res.rates));\r\n\t\t\t\treturn res.rates;\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tdispatch(fetchExratesError(error));\r\n\t\t\t})\r\n\t\t}\r\n}\r\n\r\nexport function triggerFetch(needFetch) { return dispatch => { console.log('triggerFetch!!'); dispatch(setNeedFetch(needFetch)) } };\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { List, Button, Label, Grid, Segment } from 'semantic-ui-react';\r\nimport { CurrencyNames } from './../Utils';\r\nimport { remItem } from './../redux/actions';\r\nimport './CurrencyListItem.css';\r\n\r\nclass CurrencyListItem extends Component {\r\n\r\n\trender() {\r\n\t\tconsole.log('ItemThisProps: ', this.props);\r\n\t\tconst { item, remItem, baseCurrency, baseAmount } = this.props;\r\n\t\treturn (\r\n\t\t\t<List.Item>\r\n\t\t\t\t<List.Content>\r\n\t\t\t\t\t<Segment>\r\n\t\t\t\t\t\t<Grid columns=\"equal\">\r\n\t\t\t\t\t\t\t<Grid.Row stretched>\r\n\t\t\t\t\t\t\t\t<Grid.Column textAlign=\"left\">\r\n\t\t\t\t\t\t\t\t\t<Grid columns=\"equal\">\r\n\t\t\t\t\t\t\t\t\t\t<Grid.Column textAlign=\"left\" width=\"4\">\r\n\t\t\t\t\t\t\t\t\t\t\t<Label size=\"large\">{item.sym}</Label>\r\n\t\t\t\t\t\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t\t\t\t\t\t\t<Grid.Column textAlign=\"right\" >\r\n\t\t\t\t\t\t\t\t\t\t\t<Label className=\"cur_amount\" size=\"large\">{Number(parseFloat(baseAmount * item.exrate).toFixed(item.decimals)).toLocaleString('default',{minimumFractionDigits:item.decimals,maximumFractionDigits:item.decimals})}</Label>\r\n\t\t\t\t\t\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t\t\t\t<Label size=\"small\">{item.sym} - {CurrencyNames[item.sym]}</Label>\r\n\t\t\t\t\t\t\t\t\t<Label size=\"small\">1 {baseCurrency} = {item.sym} {Number(parseFloat(item.exrate).toFixed(item.decimals)).toLocaleString('default',{minimumFractionDigits:item.decimals,maximumFractionDigits:item.decimals})}</Label>\r\n\t\t\t\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t\t\t\t\t<Grid.Column width={6} textAlign=\"center\">\r\n\t\t\t\t\t\t\t\t\t<Button floated=\"right\" onClick={() => remItem(item.id)} icon={{name:\"times circle\", size:\"big\"}} negative />\r\n\t\t\t\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t\t\t\t</Grid.Row>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Segment>\r\n\t\t\t\t</List.Content>\r\n\t\t\t</List.Item>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = ({ baseCurrency, baseAmount }) => {\r\n\tconsole.log('ItemThisState2: ', { baseCurrency, baseAmount });\r\n\treturn {\r\n\t\tbaseCurrency, \r\n\t\tbaseAmount\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tremItem: (id) => {\r\n\t\t\tconsole.log('remItem!');\r\n\t\t\tdispatch(remItem(id));\r\n\t\t},\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrencyListItem)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { List, Dimmer, Loader } from 'semantic-ui-react'\r\nimport { remItem } from './../redux/actions';\r\nimport { getNeedFetch, getExrates, getExratesPending, getExratesError } from './../redux/reducers';\r\nimport  fetchExrates from './../services/httpService';\r\nimport CurrencyListItem from './CurrencyListItem';\r\nimport './CurrencyList.css';\r\n\r\n\r\nclass CurrencyList extends Component{\r\n\r\n\tcomponentDidMount() {\r\n\t\tconsole.log('ListThisPropsDidMount: ',this.props);\r\n\t\tconst {fetchExrates, baseCurrency, itemList} = this.props;\r\n\t\t// Initial fetching\r\n\t\tfetchExrates(baseCurrency, itemList.map((item)=>{return item.sym}).join(','));\r\n\t}\r\n\t\r\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\r\n\t\tconsole.log('ListThisPropsDidUpdate: ',this.props, ' PrevProps: ',prevProps);\r\n\t\tconst {fetchExrates, baseCurrency, itemList, needFetch} = this.props;\r\n\t\tif (needFetch === true && prevProps.needFetch === false)\r\n\t\t{\r\n\t\t\tfetchExrates(baseCurrency, itemList.map((item)=>{return item.sym}).join(','));\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('ListThisProps: ',this.props);\r\n\t\tconst {itemList, baseCurrency, baseAmount, fetchPending} = this.props;\r\n\r\n\t\tif (fetchPending) {\r\n\t\t\tconsole.log('ListThisPending: ',fetchPending);\r\n\t\t\treturn (\r\n\t\t\t\t<Dimmer active inverted>\r\n\t\t\t\t\t<Loader size='large'>Loading</Loader>\r\n\t\t\t\t</Dimmer>\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<List>\r\n\t\t\t\t{itemList.map((item) => <CurrencyListItem key={item.id} item={item} remItem={remItem} baseCurrency={baseCurrency} baseAmount={baseAmount} />)}\r\n\t\t\t</List>\r\n\t\t);\t\t\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    baseCurrency: state.baseCurrency,\r\n\tbaseAmount: state.baseAmount,\r\n\titemList: getExrates(state),\r\n\tfetchError: getExratesError(state),\r\n\tfetchPending: getExratesPending(state),\r\n\tneedFetch: getNeedFetch(state),\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({\r\n\tfetchExrates,\r\n}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CurrencyList)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, Dropdown, Form } from 'semantic-ui-react';\r\nimport { CurrencyNames } from './../Utils';\r\nimport { addItem } from './../redux/actions';\r\nimport './AddMoreCurrency.css';\r\n\r\nclass AddMoreCurrency extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // local state\r\n        this.state = {\r\n            showAddMore: true,\r\n            currency: '',\r\n            currencyOptions: Object.keys(CurrencyNames).map((sym) => {\r\n                return {\r\n                  key: sym,\r\n                  text: sym,\r\n                  value: sym,\r\n                }\r\n            }),\r\n        }\r\n    }\r\n\r\n    toggleAddMore = () => {\r\n        this.setState(state => ({ showAddMore: !state.showAddMore }));\r\n    };\r\n\r\n    // Save Form data in local state\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value });\r\n\r\n    handleSubmit = (e) => {\r\n        console.log('CurThisOnSubmit: ',this.state,' / e: ',e);\r\n        // Get DropDown value\r\n        const { currency } = this.state;\r\n        // Reset Form values\r\n        this.toggleAddMore();\r\n        this.setState({ currency:'' });\r\n        if (currency!==\"\") {\r\n            this.props.dispatch(addItem((currency).toUpperCase()));\r\n        }\r\n    }\r\n\r\n\trender() {\r\n        console.log('CurThisState: ',this.state);\r\n        console.log('CurThisProps: ',this.props);\r\n        const {currency, showAddMore} = this.state;\r\n        \r\n\t\tif(showAddMore){\r\n            return(\r\n                <Button fluid onClick={this.toggleAddMore} icon={{name:\"plus circle\", size:\"large\"}} labelPosition='left' positive content=\"Add More Currencies\" />              \r\n            );\r\n        }\r\n     \r\n        return(\r\n            <Form onSubmit={this.handleSubmit}>\r\n                <Form.Group widths=\"equal\">\r\n                    <Form.Field>\r\n                        <Dropdown className=\"select_currency\" name='currency' ref=\"currency\" placeholder='Currency' value={currency} fluid search selection options={this.state.currencyOptions} onChange={this.handleChange} />\r\n                    </Form.Field>\r\n                    <Form.Field width={4}>\r\n                        <Button floated=\"right\" type=\"submit\" content=\"Submit\" primary />\r\n                    </Form.Field>\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n\r\n\t}\r\n}\r\n\r\nexport default connect()(AddMoreCurrency)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Container, Segment, Label, Input, Divider } from 'semantic-ui-react';\r\nimport { CurrencyNames } from './../Utils';\r\nimport { setBaseAmount } from './../redux/actions';\r\nimport CurrencyList from './CurrencyList';\r\nimport AddMoreCurrency from './AddMoreCurrency';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // local state\r\n    this.state = {\r\n      baseAmount: \"10.0000\",\r\n    }\r\n  }\r\n\r\n  // Save Form data in local state\r\n  handleChange = (e, { name, value }) => {\r\n    this.setState({ [name]: value });\r\n    console.log('AppThisState: ',this.state,' / ',{[name]:value});\r\n    console.log('AppThisProps: ',this.props);\r\n    // since setState is async we shouldn't use it's value immediately\r\n    const { baseAmount } = {...this.state, [name]:value };\r\n    this.props.dispatch(setBaseAmount(parseFloat(baseAmount)));\r\n  }\r\n\r\n  handleBlur = (e) => {\r\n    console.log('CurThisOnBlurState: ',this.state,' / e: ',e,' CurThisOnBlurProps: ',this.props);\r\n    this.setState({baseAmount: parseFloat(this.props.baseAmount).toFixed(4)});\r\n  }\r\n\t\r\n\trender() {\r\n\t\tconst {itemList, baseCurrency} = this.props;\r\n\t\treturn (\r\n\t\t\t<Container textAlign=\"center\">\r\n        <Segment className=\"app_wrapper\" textAlign=\"left\">\r\n          <Label size=\"small\">\r\n            {baseCurrency} - {CurrencyNames[baseCurrency]}\r\n          </Label>\r\n          <Input className=\"base_amount\" name=\"baseAmount\" ref=\"baseAmount\" fluid labelPosition=\"left\" size=\"large\" type=\"text\" placeholder=\"Amount\" value={this.state.baseAmount || this.props.baseAmount} onChange={this.handleChange} onBlur={this.handleBlur}>\r\n            <Label basic>{baseCurrency}</Label>\r\n              <input />\r\n          </Input>\r\n          <Divider />\r\n\r\n\t\t\t\t  <CurrencyList itemList={itemList} />\r\n\r\n          <Segment>\r\n            <AddMoreCurrency />\r\n          </Segment>\r\n        </Segment>\r\n\t\t\t</Container>\r\n\t\t)\t\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = ({ itemList, baseCurrency, baseAmount })  => {\r\n  return {\r\n    itemList,\r\n    baseCurrency,\r\n    baseAmount\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(App)\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, \n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}